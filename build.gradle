plugins {
    id 'java'
    id 'application'                       //adds the run task. also adds application{main-class} line below
//    id 'java-library'                    //adds api command!
    id 'me.champeau.jmh' version '0.6.7'   //jmh benchmarking plugin
}

group 'org.core'
version '1.0-SNAPSHOT'
java.sourceCompatibility JavaVersion.VERSION_19

/* for java -jar ..`
 * add below to use 'java -jar ..' command!
 * else use 'gradle run' or 'java -cp ...jar className'
 *
 * for multi-modules, inject into related build.gradle
 */
jar {
    manifest {
        attributes('Implementation-Title': 'Gradle Sandbox',
                'Implementation-Version': archiveVersion,
//                   'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                'Main-Class': 'org.core.Main')

    }
}

/* for gradle run task
 *
 * Define the (full path) main class for the application.
 */
application {

    mainClass = 'org.core.Main'
}

repositories {
    mavenCentral()
}

dependencies {

    /* for multi-modules projects, to be able to include other projects
     *   - here, implementation dependency, for build/run tasks
     *   - in java commands, use -cp to add core project jar, too!! (java -cp ..jar:..core.jar org.MainBlaBla)
     */
//    implementation project(':core')

    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'

    //for src.jmh folder.. package names must be the same with main module!!
    jmh 'org.openjdk.jmh:jmh-core:1.35'
    jmh 'org.openjdk.jmh:jmh-generator-annprocess:1.35'

    //that solves the missing /META-INF/BenchmarkList error
    jmhAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.35'
}

test {
    //for junit5
    useJUnitPlatform()
}

/* for custom task definition
 * register first, then define
 */
tasks.register('hi') {
    description 'to see some parameter values'

    println "hi"
    println ant
    println buildDir
}